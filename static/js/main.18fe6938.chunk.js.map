{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","algosdk","Algodv2","addr","ALGO_TO_MICRO_ALGO","App","cb","React","useState","round","rewardRate","rewardResidue","totalMoney","estimatedRoundsUntilPayout","roundInfo","setRoundInfo","balanceWithoutRewards","earnedRewards","nextRewardAmount","pendingRewards","accountInfo","setAccountInfo","a","Promise","all","supply","do","block","accountInformation","account","rate","frac","Math","ceil","floor","status","Error","useEffect","stop","lastStatus","lastRound","statusAfterBlock","loop","className","style","display","justifyContent","alignItems","height","flexDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+fAGMA,EAAS,IAAIC,IAAQC,QAAQ,GAAI,6BAA8B,IAE/DC,EAAO,6DAEPC,EAAqB,IAsHZC,MA/Ef,WACE,IAtCgBL,EAAyBM,EAsCzC,EAAkCC,IAAMC,SAAoB,CAC1DC,MAAO,EACPC,WAAY,EACZC,cAAe,EACfC,WAAY,EACZC,2BAA4B,IAL9B,mBAAOC,EAAP,KAAkBC,EAAlB,KAQA,EAAsCR,IAAMC,SAAsB,CAChEL,KAAM,GACNa,sBAAuB,EACvBC,cAAe,EACfC,iBAAkB,EAClBC,eAAgB,IALlB,mBAAOC,EAAP,KAAoBC,EAApB,KAgDA,OA9FgBrB,EAsDPA,EAtDgCM,EAsDjC,uCAAS,WAAOG,GAAP,uCAAAa,EAAA,sEAC4BC,QAAQC,IAAI,CACrDxB,EAAOyB,SAASC,KAChB1B,EAAO2B,MAAMlB,GAAOiB,KACpB1B,EAAO4B,mBAAmBzB,GAAMuB,OAJnB,sCACRD,EADQ,KACEE,EADF,KACEA,MAASE,EADX,KAOTjB,EAAaa,EAAO,eACpBf,EAAaiB,EAAMG,KACnBnB,EAAgBgB,EAAMI,KACtBlB,EAA6BmB,KAAKC,MAAMD,KAAKE,MAAMtB,EAAaR,GAAsBO,EAAgBD,GAAcA,GAE1HK,EAAa,CACXN,QACAG,aACAF,aACAC,gBACAE,+BAKa,qBAFAgB,EAAQM,OApBR,uBAuBP,IAAIC,MAAM,4CAvBH,QA0BTpB,EAAwBa,EAAQ,kCAChCZ,EAAgBY,EAAQ,mBACxBX,EAAmBc,KAAKE,MAAMlB,EAAwBZ,GACtDe,EAAiBD,GAAoBP,EAAgBD,GAAcsB,KAAKE,MAAMtB,EAAaR,GAEjGiB,EAAe,CACblB,OACAa,wBACAC,gBACAC,mBACAC,mBApCa,4CAAT,sDArDDZ,IAAM8B,WAAU,WACrB,IAAIC,GAAO,EAcX,OAZU,uCAAG,8BAAAhB,EAAA,sEACctB,EAAOmC,SAAST,KAD9B,OACLa,EADK,OAEPC,EAAYD,EAAW,cAFhB,UAGHD,EAHG,wBAIPhC,EAAGkC,GACHA,IALO,SAMDxC,EAAOyC,iBAAiBD,GAAWd,KANlC,kEAAH,oDAUVgB,GAEO,WAAQJ,GAAO,KAErB,IA6ED,qBAAKK,UAAU,MAAf,SACE,sBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,cAAe,UANnB,UASE,0CAAa7B,EAAYjB,QACzB,wCAAWW,EAAUL,SACrB,0CAAaW,EAAYJ,sBAAsBZ,EAA/C,YACA,iDAAoBgB,EAAYH,cAAcb,EAA9C,YACA,kDAAqBgB,EAAYD,eAAef,EAAhD,YACA,gEAAmCU,EAAUD,oCCzGtCqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.18fe6938.chunk.js","sourcesContent":["import React from 'react';\nimport algosdk from 'algosdk';\n\nconst client = new algosdk.Algodv2('', 'https://algoexplorerapi.io', '');\n\nconst addr = 'YX5KZSZT27L7WZAW7TNONVDZHQQAURJKT4BPRS364KTH2DGMEKLLFOPK3U';\n\nconst ALGO_TO_MICRO_ALGO = 1000000;\n\nfunction useRound(client: algosdk.Algodv2, cb: (round: number) => unknown) {\n  return React.useEffect(() => {\n    let stop = false;\n\n    const loop = async () => {\n      const lastStatus = await client.status().do();\n      let lastRound = lastStatus['last-round'];\n      while (!stop) {\n          cb(lastRound);\n          lastRound++\n          await client.statusAfterBlock(lastRound).do();\n      }\n    }\n\n    loop();\n\n    return () => { stop = true };\n  // eslint-disable-next-line\n  }, []);\n}\n\ninterface RoundInfo {\n  round: number,\n  rewardRate: number,\n  rewardResidue: number,\n  totalMoney: number,\n  estimatedRoundsUntilPayout: number,\n}\n\ninterface AccountInfo {\n  addr: string,\n  balanceWithoutRewards: number,\n  earnedRewards: number,\n  pendingRewards: number,\n  nextRewardAmount: number,\n}\n\nfunction App() {\n  const [roundInfo, setRoundInfo] = React.useState<RoundInfo>({\n    round: 0,\n    rewardRate: 0,\n    rewardResidue: 0,\n    totalMoney: 0,\n    estimatedRoundsUntilPayout: 0,\n  });\n\n  const [accountInfo, setAccountInfo] = React.useState<AccountInfo>({\n    addr: '',\n    balanceWithoutRewards: 0,\n    earnedRewards: 0,\n    nextRewardAmount: 0,\n    pendingRewards: 0,\n  });\n\n  useRound(client, async (round) => {\n    const [supply, { block }, account] = await Promise.all([\n      client.supply().do(),\n      client.block(round).do(),\n      client.accountInformation(addr).do(),\n    ]);\n\n    const totalMoney = supply['total-money'] as number;\n    const rewardRate = block.rate as number;\n    const rewardResidue = block.frac as number;\n    const estimatedRoundsUntilPayout = Math.ceil((Math.floor(totalMoney / ALGO_TO_MICRO_ALGO) - rewardResidue - rewardRate) / rewardRate);\n\n    setRoundInfo({\n      round,\n      totalMoney,\n      rewardRate,\n      rewardResidue,\n      estimatedRoundsUntilPayout,\n    });\n\n    const status = account.status as string;\n\n    if (status === 'NotParticipating') {\n      throw new Error('This account is not eligible for rewards');\n    }\n\n    const balanceWithoutRewards = account['amount-without-pending-rewards'] as number;\n    const earnedRewards = account['pending-rewards'] as number;\n    const nextRewardAmount = Math.floor(balanceWithoutRewards / ALGO_TO_MICRO_ALGO);\n    const pendingRewards = nextRewardAmount * (rewardResidue + rewardRate) / Math.floor(totalMoney / ALGO_TO_MICRO_ALGO);\n\n    setAccountInfo({\n      addr,\n      balanceWithoutRewards,\n      earnedRewards,\n      nextRewardAmount,\n      pendingRewards,\n    });\n  });\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n          flexDirection: \"column\",\n        }}\n      >\n        <p>Account: {accountInfo.addr}</p>\n        <p>Round: {roundInfo.round}</p>\n        <p>Balance: {accountInfo.balanceWithoutRewards/ALGO_TO_MICRO_ALGO} Algos</p>\n        <p>Earned rewards: {accountInfo.earnedRewards/ALGO_TO_MICRO_ALGO} Algos</p>\n        <p>Pending rewards: {accountInfo.pendingRewards/ALGO_TO_MICRO_ALGO} Algos</p>\n        <p>Estimated rounds until payout: {roundInfo.estimatedRoundsUntilPayout}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}